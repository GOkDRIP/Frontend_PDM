name: 📦 Build APK y subir a Google Drive
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}

      - name: Build APK (Debug)
        run: |
          chmod +x ./gradlew
          ./gradlew :app:assembleDebug --build-cache --parallel --daemon

      - name: Upload APK como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: app/build/outputs/apk/debug/app-debug.apk

      # ─────────────────────────────────────────────────────────────
      # 1) Subir a Drive (quedará “owned” por la Service Account)
      # ─────────────────────────────────────────────────────────────
      - id: upload
        name: Upload APK to Google Drive
        uses: mathisve/gdrive-upload-action@main
        with:
          credentials:  ${{ secrets.GDRIVE_SERVICE_ACCOUNT_KEY_BASE64 }}
          encoded:       true
          filename:      app/build/outputs/apk/debug/app-debug.apk
          name:          fitlife-${{ github.run_number }}.apk
          folderId:      ${{ secrets.GDRIVE_FOLDER_ID }}
          overwrite:     true            

      # ─────────────────────────────────────────────────────────────
      # 2) AUTENTICAR Service Account para poder llamar a la API
      # ─────────────────────────────────────────────────────────────
      - id: gauth
        name: Auth as Service Account
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GDRIVE_SERVICE_ACCOUNT_KEY_BASE64 }}
          export_environment_variables: true   # nos da $GOOGLE_ACCESS_TOKEN

      # ─────────────────────────────────────────────────────────────
      # 3) Transferir la propiedad al usuario final
      # ─────────────────────────────────────────────────────────────
      - name: Make ${{ secrets.OWNER_EMAIL }} the owner
        run: |
          curl -s -X POST \
            -H "Authorization: Bearer $GOOGLE_ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"role\":\"owner\",\"type\":\"user\",\"emailAddress\":\"${{ secrets.OWNER_EMAIL }}\"}" \
            "https://www.googleapis.com/drive/v3/files/${{ steps.upload.outputs.fileId }}/permissions?transferOwnership=true"
